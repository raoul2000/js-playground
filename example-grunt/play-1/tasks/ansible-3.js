"use strict";

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

const EXE_EXTENSION = ['.bash', '.bash.src', '.sh'];

function isEmptyDir(grunt, dirPath) {
  if( grunt.file.isDir(dirPath) ){
    let files = grunt.file.expand( { 'cwd' : dirPath }, '*');
    return files.length === 0;
  }
  return false;
}

function isExecutable(file) {
  for (var i = 0; i < EXE_EXTENSION.length; i++) {
    if( file.endsWith(EXE_EXTENSION[i])) {
      return true;
    }
  }
  return false;
}
/**
 * Create a yaml file containing an Ansible playbook generated by scanning
 * the content of a folder (source folder)
 */
exports.createPlaybook = function(name, grunt, role) {

  // validate arguments ////////////////////////////////////////////////////////

  // local base path validation
  grunt.config.requires(`${name}.buildDir`);
  let baseFolderPath = grunt.config(`${name}.buildDir`);
  if(  ! grunt.file.isDir(baseFolderPath) ) {
    grunt.log.error('Base Folder not found : '+baseFolderPath);
    return false;
  }

  // remote folder path validation
  grunt.config.requires(`${name}.targetFolderPath`);
  let remoteFolderPath = grunt.config(`${name}.targetFolderPath`);

  // role & int settings validation and normalization
  if( ! role || role.length === 0){
    grunt.log.error('invalid role list : '+role);
    return false;
  }

  // normalize arguments role into array
  role = role.split(',')
    .filter( x => x && x.trim().length !== 0)
    .map( x => x.trim());

  grunt.log.ok('baseFolderPath   : ',baseFolderPath);
  grunt.log.ok('remoteFolderPath : ',remoteFolderPath);
  grunt.log.ok('role             : ',role);

  ////////////////////////////////////////////////////////////////////////////
  // create playbook folder

  let playbookFolder = path.posix.join(baseFolderPath, 'playbook');
  if( ! grunt.file.exists(playbookFolder)) {
    grunt.verbose.writeln('creating ansible playbook folder : '+playbookFolder);
    grunt.file.mkdir(playbookFolder);
  }

  ////////////////////////////////////////////////////////////////////////////

  role.forEach( thisRole => {
    grunt.log.ok('----- processing role : '+thisRole);
    let ansiblePlaybook = {
      'hosts' : thisRole,
      'tasks' : []
    };
    let srcBasePath   = path.join( baseFolderPath, thisRole);
    let countCopyFile = 0, countCcreateEmptyFolder = 0, countSetExecutable = 0;

    grunt.file.expand({
      'cwd' : srcBasePath
    },['**/**'])
    .filter( x => x.trim().length > 0)
    .forEach( item => {
      let srcPath = path.join(srcBasePath, item);
      let trgPath = path.posix.join(remoteFolderPath, item);
      let newTask = null;
      if( grunt.file.isFile(srcPath)) {
        countCopyFile++;
        newTask = {
          "name" : `copy ../${thisRole}/${item} to ${trgPath}`,
          "copy" : {
            'src'    : `../${thisRole}/${item}`,
            'dest'   : trgPath,
            'backup' : 'yes'
          }
        };
        if( isExecutable(srcPath)) {
          countSetExecutable++;
          newTask.copy.mode = 'u=rwx,g=rx,o=rx';
        }
      }else if(isEmptyDir(grunt, srcPath)) {
        countCcreateEmptyFolder++;
        newTask = {
          "name" : `create empty folder ${trgPath}`,
          "file" : {
            'path'  : trgPath,
            'state' : 'directory'
          }
        };
      }
      if( newTask ) {
        grunt.verbose.ok('adding new task', newTask);
        ansiblePlaybook.tasks.push(newTask);
      }

    }); // for each file in the current role

    grunt.log.ok(`stats :
      copy files (executable) = ${countCopyFile} (${countSetExecutable}),
      create empty folder     = ${countCcreateEmptyFolder},
      total tasks             = ${ansiblePlaybook.tasks.length}
    `);
    if( ansiblePlaybook.tasks.length) {
      grunt.verbose.ok('writing playbook file');
      let playbookPath = path.posix.join(playbookFolder, `${thisRole}.yaml`);
      if( grunt.file.exists(playbookPath)) {
        grunt.verbose.ok('existing file deleted : '+playbookPath);
        grunt.file.delete(playbookPath);
      }

      let yamlString = yaml.safeDump ([ansiblePlaybook], {'json' : true});
      fs.writeFileSync(playbookPath, yamlString);
      grunt.log.ok("create playbook : "+playbookPath);
    } else {
      grunt.log.ok("no playbook file created");
    }
  });
};
